#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "transparency.glsl"
#include "../glsl/random.glsl"

///////////////////////////////////////////////
// Set 0: world
///////////////////////////////////////////////
layout(set=0,binding=0,std140) uniform World {
	mat4 view;
	mat4 viewProj;
	mat4 viewInverse;
	mat4 projInverse;
	vec4 cameraPos;
	uvec4 numLights;
	int pcfSamples;
	int occluderSamples;
}scene;

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(set = 5, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 5, binding = 3, rgba8) uniform image2D raytracedTransparency;

const uint NBSAMPLES = 1;

void main() 
{
    // Initialize the random number
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, rayConstants.frame);
    prd.seed = seed;

    vec3 hitValues = vec3(0);

    for(int smpl = 0; smpl < NBSAMPLES; smpl++)
    {
        float r1 = rnd(seed);
        float r2 = rnd(seed);

        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide antialiasing.
        vec2 subpixel_jitter = rayConstants.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
        const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
        vec2       d           = inUV * 2.0 - 1.0;

        vec4 origin    = scene.viewInverse * vec4(0, 0, 0, 1);
        vec4 target    = scene.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = scene.viewInverse * vec4(normalize(target.xyz), 0);

        uint  rayFlags = gl_RayFlagsSkipClosestHitShaderEXT;
        float tMin     = 0.001;
        float tMax     = 10000.0;

        prd.depth = 0;
        prd.done = 1;
        prd.rayOrigin = origin.xyz;
        prd.rayDir = direction.xyz;
        prd.hitValue = vec3(0);

        for(;;)
        {
            traceRayEXT(topLevelAS,     // acceleration structure
                        rayFlags,       // rayFlags
                        0xFF,           // cullMask
                        0,              // sbtRecordOffset
                        0,              // sbtRecordStride
                        0,              // missIndex
                        prd.rayOrigin,     // ray origin
                        tMin,           // ray min range
                        prd.rayDir,  // ray direction
                        tMax,           // ray max range
                        0               // payload (location = 0)
            );

            prd.depth++;
            if(prd.done == 1 || prd.depth >= rayConstants.rayDepth)
            {
                hitValues += prd.hitValue;
                break;
            }
        }
    }

    vec3 accHitValue = hitValues / NBSAMPLES;

    // Do accumulation over time
    if(rayConstants.frame > 0)
    {
        float a         = 1.0f / float(rayConstants.frame + 1);
        vec3  old_color = imageLoad(raytracedTransparency, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(raytracedTransparency, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, accHitValue, a), 1.f));
    }
    else
    {
        imageStore(raytracedTransparency, ivec2(gl_LaunchIDEXT.xy), vec4(accHitValue, 1.f));
    }
}
