#version 450

layout (local_size_x = 4, local_size_y = 4, local_size_z=1) in;

// input and output are both interpreted as unsigend, normalized fixed point numbers
layout (binding = 0, rgba8) uniform readonly imageCube inputImage;
layout (binding = 1, rgba8) uniform imageCube resultImage;

#include "../glsl/cubemap.glsl"
#include "../glsl/hdr.glsl"

void main()
{
    // normal direction
    ivec3 inSize = ivec3(imageSize(inputImage), 6);
    ivec3 outSize = ivec3(imageSize(resultImage), 6);

    vec2 uv_in = gl_GlobalInvocationID.xy / vec2(outSize.xy);
    // find current normal on the result cubemap
    vec3 normal = CubeUVtoCartesian(int(gl_GlobalInvocationID.z), uv_in);

    vec3 irradiance = vec3(0);
    int samples = 0;

    // iterate over all pixels in the input cubemap
    for (int z=0;z<inSize.z;++z)
    {
        for (int i=0;i<inSize.x;++i)
        {
            for (int j=0;j<inSize.y;++j)
            {
                vec3 sampled_normal = CubeUVtoCartesian(z, vec2(i,j) / vec2(inSize.xy));
                float cos_theta = dot(sampled_normal, normal);
                if (cos_theta <= 0)
                    continue;

                vec3 sampled_rgb = vec3(imageLoad(inputImage, ivec3(i,j,z)));
                irradiance += sampled_rgb * cos_theta;
                samples++;
            }
        }
    }

    irradiance /= vec3(samples);
    imageStore(resultImage, ivec3(gl_GlobalInvocationID.xyz), vec4(irradiance, 1));
}