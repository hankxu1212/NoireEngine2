#version 450

#include "../../glsl/cubemap.glsl"
#include "../../glsl/hdr.glsl"

layout (local_size_x = 4, local_size_y = 4, local_size_z=1) in;

// input and output are both interpreted as unsigend, normalized fixed point numbers
layout (set=0, binding = 0, rgba8) uniform readonly imageCube inputImage;
layout (set=0, binding = 1, rgba8) uniform imageCube resultImage;

#include "../../glsl/pbr.glsl"

// compile time specialization constants
layout (constant_id = 0) const int IS_HDR = 1;
layout (constant_id = 1) const int MIP_LEVEL = 0;

void main()
{
    // N direction
    ivec3 inSize = ivec3(imageSize(inputImage), 6);
    ivec3 outSize = ivec3(imageSize(resultImage), 6);
    float roughness = MIP_LEVEL * 0.2;

    vec2 uv_in = gl_GlobalInvocationID.xy / vec2(outSize.xy);
    vec3 N = CubeUVtoCartesian(int(gl_GlobalInvocationID.z), uv_in);

    vec3 irradiance = vec3(0);
    int samples = 0;

    // iterate over all pixels in the input cubemap
    for (int z=0;z<inSize.z;++z)
    {
        for (int i=0;i<inSize.x;++i)
        {
            for (int j=0;j<inSize.y;++j)
            {
                vec3 H = CubeUVtoCartesian(z, vec2(i,j) / vec2(inSize.xy));

                vec3 L = reflect(-N, H);
                float NoL = max(0.0, dot(N, L));
                float NoH = max(0.0, dot(N, H));

                float ggxNDF = DistributionGGX(NoH, roughness);
                vec3 sampled_rgb;
                if (IS_HDR == 1){
                    vec4 sampled_rgbe = imageLoad(inputImage, ivec3(i,j,z));
                    sampled_rgb = vec3(rgbe_f_to_float(sampled_rgbe));
                }
                else
                {
                    sampled_rgb = imageLoad(inputImage, ivec3(i,j,z)).rgb;
                }
                irradiance += sampled_rgb * ggxNDF * NoL;
                samples++;
            }
        }
    }

    irradiance /= vec3(samples);
    vec4 rgb_out;
    if (IS_HDR == 1)
        rgb_out = float_f_to_rgbe(irradiance);
    else
        rgb_out = vec4(irradiance, 1);

    imageStore(resultImage, ivec3(gl_GlobalInvocationID.xyz), rgb_out);
}
